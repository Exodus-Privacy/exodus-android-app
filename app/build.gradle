plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33
        versionCode 15
        versionName "3.1.0"
        testInstrumentationRunner 'org.eu.exodus_privacy.exodusprivacy.ExodusTestRunner'
        buildConfigField "String", "EXODUS_API_KEY", "\"$System.env.EXODUS_API_KEY\""
        javaCompileOptions {
            annotationProcessorOptions {
                compilerArgumentProviders(
                        new RoomSchemaArgProvider(new File(projectDir, "schemas"))
                )
            }
        }
        resourceConfigurations += ['en', 'ar', 'ca', 'de', 'el', 'fr', 'it', 'pt_BR', 'ru', 'tr', 'uk']
    }
    signingConfigs {
        releaseConfig {
            // check whether we are in release workflow or on dev system
            if (System.getenv("KEYSTORE_FILE") != null) {
                storeFile file(System.getenv('KEYSTORE_FILE'))
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('KEYSTORE_ALIAS')
                keyPassword System.getenv('KEYSTORE_PASSPHRASE')
            } else {
                storeFile file("release.keystore")
                storePassword System.getenv('KEYSTORE_PASSWORD')
                keyAlias System.getenv('KEYSTORE_ALIAS')
                keyPassword System.getenv('KEYSTORE_PASSPHRASE')
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            debuggable true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        lintConfig file("lint.xml")
    }
    namespace 'org.eu.exodus_privacy.exodusprivacy'
}

kapt {
    correctErrorTypes true
}

dependencies {

    // r8
    implementation libs.tools.r8

    implementation libs.androidx.core.ktx
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.androidx.legacy.support.v4
    implementation libs.androidx.core.splashscreen
    implementation libs.markwon.core
    implementation libs.androidx.window
    implementation libs.androidx.appcompat

    implementation libs.androidx.constraintlayout
    implementation libs.androidx.recyclerview
    implementation libs.androidx.swiperefreshlayout
    implementation libs.android.material
    implementation libs.code.gson
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.browser
    implementation libs.androidx.datastore.preferences
    implementation libs.shimmer
    implementation libs.kotlinx.coroutines.android
    implementation libs.androidx.test.junit.ktx

    // Navigation Components
    implementation libs.androidx.navigation.fragment.ktx
    implementation libs.androidx.navigation.ui.ktx

    // Retrofit and Moshi
    implementation libs.retrofit
    implementation libs.retrofit.converter.moshi

    // okhttp
    implementation libs.okhttp

    // Hilt
    kapt libs.dagger.hilt.compiler
    implementation libs.dagger.hilt.android

    // Lifecycle
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.service

    // Room
    kapt libs.androidx.room.compiler
    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.runtime

    // KTX
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.activity.ktx

    // unit tests
    testImplementation libs.junit
    testImplementation libs.robolectric
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.runner
    testImplementation libs.androidx.test.rules
    testImplementation libs.dagger.hilt.android.testing
    testImplementation libs.okhttp.mockwebserver
    kaptTest libs.dagger.hilt.compiler

    // instrumentation tests
    kaptAndroidTest libs.dagger.hilt.compiler
    androidTestImplementation libs.dagger.hilt.android.testing
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.core.ktx
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.room.testing
    androidTestImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.okhttp.mockwebserver
    androidTestImplementation libs.androidx.test.ext.junit
}

class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
    }

    @Override
    Iterable<String> asArguments() {
        return ["-Aroom.schemaLocation=${schemaDir.path}".toString()]
    }
}

